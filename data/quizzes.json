{
  "quizzes": [
    {
      "id": "b452c41c-a116-413d-9da1-9f57474f1a44",
      "title": "INT305_Week01 Introduction to XML and DTD.pdf",
      "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
      "createdAt": "2025-09-09T15:58:59.930Z",
      "questionCount": 30,
      "questions": [
        {
          "id": "1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What is XML designed to do?",
          "options": [
            {
              "id": "A",
              "text": "Replace HTML entirely.",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "Enable different kinds of data to be exchanged over the web.",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "Function as a newer version of SGML.",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "Make web browsing more complex.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "XML is designed to complement HTML by enabling different kinds of data to be exchanged over the web.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "XML is designed to complement for HTML by enabling different kinds of data to be exchanged over the web."
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "2",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What is XML?",
          "options": [
            {
              "id": "A",
              "text": "A type of database",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "A metalanguage that allows designers to create custom tags",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "A tool for website design",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "A language for programming",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "XML is a metalanguage (a language for describing other languages) that enables designers to create their own customized tags to provide functionality not available with HTML",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "A metalanguage (a language for describing other languages) that enables designers to create their own customized tags to provide functionality not available with HTML"
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "3",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "Which of the following best describes semi-structured data?",
          "options": [
            {
              "id": "A",
              "text": "Data that conforms to a fixed schema.",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "Data that has some structure, but may not be regular or complete.",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "Data with no structure at all.",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "Data where the schema is defined separately.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Semi-structured data has some structure, but it may not be regular or complete.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                3
              ],
              "snippets": [
                "Data that has some structure, but may not be regular or complete"
              ]
            }
          },
          "topicTags": [
            "Semi-structured Data"
          ]
        },
        {
          "id": "4",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What does it mean for XML to be 'extensible'?",
          "options": [
            {
              "id": "A",
              "text": "It has a limited set of tags.",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "It is designed to be unchangeable.",
              "isCorrect": false
            },
            {
              "id": "C",
              "text": "It allows you to define your own tags.",
              "isCorrect": true
            },
            {
              "id": "D",
              "text": "It is only for displaying content, but not data.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Extensibility means you can define your own tags.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "Extensibility (define your own tags)"
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "5",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is SGML?",
          "options": [
            {
              "id": "A",
              "text": "A system for defining structured document types and markup languages.",
              "isCorrect": true
            },
            {
              "id": "B",
              "text": "The newest version of XML.",
              "isCorrect": false
            },
            {
              "id": "C",
              "text": "A proprietary language for web development.",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "A simple language for creating web pages.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "SGML is a system for defining structured document types and markup languages to represent instances of those document types.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Is a system for defining structured document types and markup languages to represent instances of those document types"
              ]
            }
          },
          "topicTags": [
            "SGML"
          ]
        },
        {
          "id": "6",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which is an advantage of XML?",
          "options": [
            {
              "id": "A",
              "text": "Complexity",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "Simplicity",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "Limited functionality",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "Vendor lock-in",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Simplicity is an advantage of XML.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "Simplicity (tex-based, human-legible)"
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "7",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which of the following is a characteristic of XML elements?",
          "options": [
            {
              "id": "A",
              "text": "XML elements are case-insensitive.",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "XML elements are properly nested.",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "XML elements do not require a root element.",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "XML elements must contain attributes.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "XML elements must be properly nested.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "Elements must be properly nested."
              ]
            }
          },
          "topicTags": [
            "XML Elements"
          ]
        },
        {
          "id": "8",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Where are XML attributes placed?",
          "options": [
            {
              "id": "A",
              "text": "Before the start tag",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "Inside the start-tag after the element name",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "After the end tag",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "In a separate file",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The attribute is placed inside the start tag after the corresponding element name.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Attribute is placed inside start-tag after corresponding element name with the attribute",
                "value enclosed in quotes."
              ]
            }
          },
          "topicTags": [
            "XML Attributes"
          ]
        },
        {
          "id": "9",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which statement about XML ordering is correct?",
          "options": [
            {
              "id": "A",
              "text": "Elements and attributes are ordered.",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "Elements are ordered, but attributes are unordered.",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "Elements and attributes are unordered.",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "Elements are unordered, but attributes are ordered.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "In XML, elements are ordered, but attributes are unordered.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                14
              ],
              "snippets": [
                "In XML, elements are ordered.",
                "However, attributes are unordered."
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "10",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "What is the purpose of a CDATA section in XML?",
          "options": [
            {
              "id": "A",
              "text": "To define a new element in XML",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "To instruct the XML processor to ignore markup characters",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "To declare an entity in XML",
              "isCorrect": false
            },
            {
              "id": "D",
              "text": "To create an XML comment",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "A CDATA section instructs the XML processor to ignore markup characters and pass the enclosed text directly to the application without interpretation.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                13
              ],
              "snippets": [
                "A CDATA section instructs the XML processor to ignore markup characters and pass the enclosed text directly to the application without interpretation."
              ]
            }
          },
          "topicTags": [
            "XML",
            "CDATA"
          ]
        },
        {
          "id": "11",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "Which of the following are advantages of using XML?",
          "options": [
            {
              "id": "A",
              "text": "Platform/vendor-independent",
              "isCorrect": true
            },
            {
              "id": "B",
              "text": "Complex",
              "isCorrect": false
            },
            {
              "id": "C",
              "text": "Extensibility",
              "isCorrect": true
            },
            {
              "id": "D",
              "text": "Limited Tag Sets",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "XML is platform/vendor-independent and extensible.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "Open standard and platform/vendor-independent",
                "Extensibility (define your own tags)"
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "12",
          "type": "short_answer",
          "difficulty": "easy",
          "prompt": "What is XML sometimes called because designers can create their own customized tags?",
          "options": [],
          "shortAnswerAccepted": [
            "metalanguage"
          ],
          "explanation": "Because XML allows designers to create their own customized tags to provide functionality, it can be referred to as a metalanguage.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "A metalanguage (a language for describing other languages) that enables designers to create their own customized tags to provide functionality not available with HTML"
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "13",
          "type": "short_answer",
          "difficulty": "medium",
          "prompt": "What are the XML Elements also referred to as?",
          "options": [],
          "shortAnswerAccepted": [
            "tags"
          ],
          "explanation": "XML elements are also referred to as tags.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "Elements or tags are most common form of markup."
              ]
            }
          },
          "topicTags": [
            "XML Elements"
          ]
        },
        {
          "id": "15",
          "type": "multiple_choice",
          "difficulty": "hard",
          "prompt": "What are the main purposes of Entity References in XML?",
          "options": [
            {
              "id": "A",
              "text": "Defining new elements",
              "isCorrect": false
            },
            {
              "id": "B",
              "text": "Shortcut for repeated text",
              "isCorrect": true
            },
            {
              "id": "C",
              "text": "Arbitrary unicode character insert",
              "isCorrect": true
            },
            {
              "id": "D",
              "text": "Restricting content",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Entity References main purposes are shortcut to often-repeated text, and inserting arbitrary unicode characters into text.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                12
              ],
              "snippets": [
                "Entities serve three main purposes:",
                "as shortcut to often-repeated text or include the content of external files",
                "to insert arbitrary Unicode character into text"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Entity References"
          ]
        },
        {
          "id": "16",
          "type": "short_answer",
          "difficulty": "hard",
          "prompt": "Why has SGML not been widely adopted?",
          "options": [],
          "shortAnswerAccepted": [
            "complexity"
          ],
          "explanation": "SGML provides a powerful document management system, but has not been widely adopted due to complexity.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "SGML provides a powerful document management system, but has not been widely adopted due to complexity."
              ]
            }
          },
          "topicTags": [
            "SGML"
          ]
        },
        {
          "id": "xml-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, which of the following best describes semi-structured data?",
          "options": [
            {
              "id": "xml-1-a",
              "text": "Data that conforms to a fixed schema.",
              "isCorrect": false
            },
            {
              "id": "xml-1-b",
              "text": "Data with some structure, but may not be regular or complete and does not conform to a fixed schema.",
              "isCorrect": true
            },
            {
              "id": "xml-1-c",
              "text": "Data with no structure at all.",
              "isCorrect": false
            },
            {
              "id": "xml-1-d",
              "text": "Data that requires a predefined database system.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "Data that has some structure, but may not be regular or complete"
          ],
          "explanation": "Semi-structured data has some structure but may not be regular or complete and does not conform to a fixed schema.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                3
              ],
              "snippets": [
                "Data that has some structure, but may not be regular or complete",
                "Does not conform to a fixed schema (schema-less or self-describing)"
              ]
            }
          },
          "topicTags": [
            "Semi-structured Data",
            "XML"
          ]
        },
        {
          "id": "xml-2",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "The presentation mentions that XML is a restricted version of what?",
          "options": [
            {
              "id": "xml-2-a",
              "text": "HTML",
              "isCorrect": false
            },
            {
              "id": "xml-2-b",
              "text": "SGML (Standard Generalized Markup Language)",
              "isCorrect": true
            },
            {
              "id": "xml-2-c",
              "text": "DTD",
              "isCorrect": false
            },
            {
              "id": "xml-2-d",
              "text": "CDATA",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "SGML",
            "Standard Generalized Markup Language"
          ],
          "explanation": "XML is a restricted version of SGML (Standard Generalized Markup Language).",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "XML is a restricted version of SGML (Standard Generalized Markup Language)"
              ]
            }
          },
          "topicTags": [
            "XML",
            "SGML"
          ]
        },
        {
          "id": "xml-3",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what allows a document to be logically separated into two?",
          "options": [
            {
              "id": "xml-3-a",
              "text": "XML",
              "isCorrect": false
            },
            {
              "id": "xml-3-b",
              "text": "HTML",
              "isCorrect": false
            },
            {
              "id": "xml-3-c",
              "text": "SGML",
              "isCorrect": true
            },
            {
              "id": "xml-3-d",
              "text": "CDATA",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "SGML"
          ],
          "explanation": "SGML allows a document to be logically separated into two.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "SGML allows a document to be logically separated into two:"
              ]
            }
          },
          "topicTags": [
            "SGML",
            "Document Structure"
          ]
        },
        {
          "id": "xml-4",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What is one of the advantages of XML regarding content?",
          "options": [
            {
              "id": "xml-4-a",
              "text": "It combines content and presentation.",
              "isCorrect": false
            },
            {
              "id": "xml-4-b",
              "text": "It separates content and presentation.",
              "isCorrect": true
            },
            {
              "id": "xml-4-c",
              "text": "It restricts content to plain text only.",
              "isCorrect": false
            },
            {
              "id": "xml-4-d",
              "text": "It automatically translates content into multiple languages.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "Separation of content and presentation"
          ],
          "explanation": "XML allows for separation of content and presentation, which is one of its advantages.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "Separation of content and presentation (customized view of the data in a browser)"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Advantages"
          ]
        },
        {
          "id": "xml-5",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, what characteristic distinguishes XML elements?",
          "options": [
            {
              "id": "xml-5-a",
              "text": "XML elements are case-insensitive.",
              "isCorrect": false
            },
            {
              "id": "xml-5-b",
              "text": "XML elements are case-sensitive.",
              "isCorrect": true
            },
            {
              "id": "xml-5-c",
              "text": "XML elements must be written in uppercase.",
              "isCorrect": false
            },
            {
              "id": "xml-5-d",
              "text": "XML elements must be written in lowercase.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "XML elements are case-sensitive"
          ],
          "explanation": "XML elements are case-sensitive, which means that the capitalization of element names matters.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "XML elements are case-sensitive"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Elements"
          ]
        },
        {
          "id": "xml-7",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what is the purpose of comments in XML?",
          "options": [
            {
              "id": "xml-7-a",
              "text": "To define the structure of the XML document.",
              "isCorrect": false
            },
            {
              "id": "xml-7-b",
              "text": "To include external files.",
              "isCorrect": false
            },
            {
              "id": "xml-7-c",
              "text": "To add human-readable notes or explanations to the code.",
              "isCorrect": true
            },
            {
              "id": "xml-7-d",
              "text": "To define entity references.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "add human-readable notes"
          ],
          "explanation": "Comments in XML are used to add human-readable notes or explanations to the code.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                11
              ],
              "snippets": [
                "Comments <!-- This is a comment -->"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Comments"
          ]
        },
        {
          "id": "xml-8",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the significance of XML ordering?",
          "options": [
            {
              "id": "xml-8-a",
              "text": "Both elements and attributes are unordered.",
              "isCorrect": false
            },
            {
              "id": "xml-8-b",
              "text": "Elements are ordered, but attributes are unordered.",
              "isCorrect": true
            },
            {
              "id": "xml-8-c",
              "text": "Both elements and attributes are ordered.",
              "isCorrect": false
            },
            {
              "id": "xml-8-d",
              "text": "Attributes are ordered, but elements are unordered.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "Elements are ordered",
            "Attributes are unordered"
          ],
          "explanation": "In XML, elements are ordered, meaning their sequence matters, whereas attributes are unordered.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                14
              ],
              "snippets": [
                "In XML, elements are ordered.",
                "However, attributes are unordered."
              ]
            }
          },
          "topicTags": [
            "XML",
            "Ordering"
          ]
        },
        {
          "id": "xml-9",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "What does SGML allow when working with documents?",
          "options": [
            {
              "id": "xml-9-a",
              "text": "It allows a document to be encrypted for security purposes.",
              "isCorrect": false
            },
            {
              "id": "xml-9-b",
              "text": "It allows a document to be logically separated into two.",
              "isCorrect": true
            },
            {
              "id": "xml-9-c",
              "text": "It allows a document to automatically translate into multiple languages.",
              "isCorrect": false
            },
            {
              "id": "xml-9-d",
              "text": "It allows a document to be converted into a multimedia presentation.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "document to be logically separated into two"
          ],
          "explanation": "SGML allows a document to be logically separated into two parts.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "SGML allows a document to be logically separated into two:"
              ]
            }
          },
          "topicTags": [
            "SGML",
            "Document Processing"
          ]
        },
        {
          "id": "xml-10",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, which of the following are advantages of XML?",
          "options": [
            {
              "id": "xml-10-a",
              "text": "Simplicity (text-based, human-legible)",
              "isCorrect": true
            },
            {
              "id": "xml-10-b",
              "text": "Complexity (binary-based, machine-legible)",
              "isCorrect": false
            },
            {
              "id": "xml-10-c",
              "text": "Extensibility (define your own tags)",
              "isCorrect": true
            },
            {
              "id": "xml-10-d",
              "text": "Platform-dependent",
              "isCorrect": false
            },
            {
              "id": "xml-10-e",
              "text": "Improved load balancing (delivered to the browser for local computation)",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Advantages of XML include its simplicity, extensibility, and improved load balancing.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "Simplicity (tex-based, human-legible)",
                "Extensibility (define your own tags)",
                "Improved load balancing (delivered to the browser for local computation)"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Advantages"
          ]
        },
        {
          "id": "xml-11",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "The presentation mentions that XML facilitates the integration of data from...",
          "options": [
            {
              "id": "xml-11-a",
              "text": "A single, standardized source.",
              "isCorrect": false
            },
            {
              "id": "xml-11-b",
              "text": "Multiple sources.",
              "isCorrect": true
            },
            {
              "id": "xml-11-c",
              "text": "Sources using only binary formats.",
              "isCorrect": false
            },
            {
              "id": "xml-11-d",
              "text": "Only relational databases.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "multiple sources"
          ],
          "explanation": "XML supports the integration of data from multiple sources.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "Support for the integration of data from multiple sources"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Data Integration"
          ]
        },
        {
          "id": "xml-12",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "According to the presentation, what is the primary use of entity references?",
          "options": [
            {
              "id": "xml-12-a",
              "text": "To define the structure of an XML document.",
              "isCorrect": false
            },
            {
              "id": "xml-12-b",
              "text": "To create shortcuts for often-repeated text or include the content of external files.",
              "isCorrect": true
            },
            {
              "id": "xml-12-c",
              "text": "To define processing instructions for XML documents.",
              "isCorrect": false
            },
            {
              "id": "xml-12-d",
              "text": "To define comments in XML documents.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "shortcut to often-repeated text or include the content of external files"
          ],
          "explanation": "Entity references are primarily used as shortcuts to often-repeated text or to include the content of external files.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                12
              ],
              "snippets": [
                "as shortcut to often-repeated text or include the content of external files"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Entity References"
          ]
        },
        {
          "id": "xml-13",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "How does a CDATA section impact the XML processor?",
          "options": [
            {
              "id": "xml-13-a",
              "text": "It instructs the XML processor to validate the markup characters within the section.",
              "isCorrect": false
            },
            {
              "id": "xml-13-b",
              "text": "It instructs the XML processor to ignore markup characters and pass the enclosed text directly to the application without interpretation.",
              "isCorrect": true
            },
            {
              "id": "xml-13-c",
              "text": "It instructs the XML processor to convert the enclosed text into binary code.",
              "isCorrect": false
            },
            {
              "id": "xml-13-d",
              "text": "It instructs the XML processor to encrypt the enclosed text.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "ignore markup characters",
            "pass the enclosed text directly"
          ],
          "explanation": "A CDATA section instructs the XML processor to ignore markup characters and pass the enclosed text directly to the application without interpretation.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                13
              ],
              "snippets": [
                "A CDATA section instructs the XML processor to ignore markup characters and pass the enclosed text directly to the application without interpretation."
              ]
            }
          },
          "topicTags": [
            "XML",
            "CDATA"
          ]
        },
        {
          "id": "xml-14",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, how would you best describe XML elements?",
          "options": [
            {
              "id": "xml-14-a",
              "text": "XML elements are unordered.",
              "isCorrect": false
            },
            {
              "id": "xml-14-b",
              "text": "XML elements are ordered.",
              "isCorrect": true
            },
            {
              "id": "xml-14-c",
              "text": "XML elements are sometimes ordered.",
              "isCorrect": false
            },
            {
              "id": "xml-14-d",
              "text": "XML elements are not present in XML documents.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "XML elements are ordered"
          ],
          "explanation": "In XML, elements are ordered, so their sequence matters.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                14
              ],
              "snippets": [
                "In XML, elements are ordered."
              ]
            }
          },
          "topicTags": [
            "XML",
            "Elements"
          ]
        },
        {
          "id": "xml-15",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What best describes XML?",
          "options": [
            {
              "id": "xml-15-a",
              "text": "Extensible Markup Language",
              "isCorrect": true
            },
            {
              "id": "xml-15-b",
              "text": "Extended Machine Learning",
              "isCorrect": false
            },
            {
              "id": "xml-15-c",
              "text": "Extra Markup Language",
              "isCorrect": false
            },
            {
              "id": "xml-15-d",
              "text": "Extremely Modern Language",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "Extensible Markup Language"
          ],
          "explanation": "XML stands for Extensible Markup Language.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "eXtensible Markup Language (XML)"
              ]
            }
          },
          "topicTags": [
            "XML"
          ]
        },
        {
          "id": "f3729d69-c892-433d-9003-99328729d06f",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, what is XML sometimes called because designers can create their own customized tags?",
          "options": [
            {
              "id": "opt-b82c5b35-5c06-48e8-b658-71c8db5934c5",
              "text": "A markup language",
              "isCorrect": false
            },
            {
              "id": "opt-7b9647b9-8128-4764-b699-c7a5c073473a",
              "text": "A metalanguage",
              "isCorrect": true
            },
            {
              "id": "opt-eb5b19c7-7a8c-4b89-9734-8163a201ef5a",
              "text": "A data language",
              "isCorrect": false
            },
            {
              "id": "opt-d8e474db-8697-40aa-959a-ff5f9834135b",
              "text": "A programming language",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "metalanguage"
          ],
          "explanation": "XML is referred to as a metalanguage because it enables designers to create their own customized tags. This is mentioned on page 4.",
          "source": {
            "pdfName": "INT305_Week01 Introduction to XML and DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "A metalanguage (a language for describing other languages) that enables designers to create their own customized tags to provide functionality not available with HTML"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Metalanguage",
            "Customized Tags"
          ]
        }
      ],
      "status": "draft"
    },
    {
      "id": "e03d0e49-9110-45ad-b2cc-278757944e8e",
      "title": "INT305_Week02_XML_DTD.pdf",
      "pdfName": "INT305_Week02_XML_DTD.pdf",
      "createdAt": "2025-09-09T16:06:53.332Z",
      "questionCount": 30,
      "questions": [
        {
          "id": "dtd-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What does DTD define?",
          "options": [
            {
              "id": "dtd-1-a",
              "text": "The valid syntax of an XML document",
              "isCorrect": true
            },
            {
              "id": "dtd-1-b",
              "text": "The valid semantics of an XML document",
              "isCorrect": false
            },
            {
              "id": "dtd-1-c",
              "text": "The stylesheets to be used in an XML document",
              "isCorrect": false
            },
            {
              "id": "dtd-1-d",
              "text": "The database schema for XML storage",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "DTD defines the valid syntax of an XML document. Page 1, 'DTD defines the valid syntax of an XML document'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "DTD defines the valid syntax of an XML document"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-2",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slide, what information does a DTD provide?",
          "options": [
            {
              "id": "dtd-2-a",
              "text": "List of element names",
              "isCorrect": true
            },
            {
              "id": "dtd-2-b",
              "text": "How elements can be nested",
              "isCorrect": true
            },
            {
              "id": "dtd-2-c",
              "text": "List of available attributes for each element type",
              "isCorrect": true
            },
            {
              "id": "dtd-2-d",
              "text": "Location of stylesheet definitions",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "A DTD provides a list of the element names, shows how elements can be nested, and lists attributes available for each element type. Page 1.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "List the element names",
                "Show how elements can be nested",
                "List attributes are available for each element type"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-3",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Using what is the grammar specified?",
          "options": [
            {
              "id": "dtd-3-a",
              "text": "UML",
              "isCorrect": false
            },
            {
              "id": "dtd-3-b",
              "text": "BNF",
              "isCorrect": false
            },
            {
              "id": "dtd-3-c",
              "text": "EBNF",
              "isCorrect": true
            },
            {
              "id": "dtd-3-d",
              "text": "XML Schema",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The grammar is specified using EBNF (Extended Backus-Naur Form). Page 1, 'The grammar is specified using EBNF (Extended Backus-Naur Form)'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "The grammar is specified using EBNF (Extended Backus-Naur Form)"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML",
            "EBNF"
          ]
        },
        {
          "id": "dtd-4",
          "type": "short_answer",
          "difficulty": "easy",
          "prompt": "Is DTD recommended for document conformity?",
          "options": [],
          "shortAnswerAccepted": [
            "yes",
            "true",
            "optional"
          ],
          "explanation": "Although DTD is optional, it is recommended for document conformity. Page 1, 'Although DTD is optional, it is recommended for document conformity'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "Although DTD is optional, it is recommended for document conformity"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-5",
          "type": "multiple_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, which of the following are types of DTD declarations?",
          "options": [
            {
              "id": "dtd-5-a",
              "text": "Element type declarations",
              "isCorrect": true
            },
            {
              "id": "dtd-5-b",
              "text": "Attribute list declarations",
              "isCorrect": true
            },
            {
              "id": "dtd-5-c",
              "text": "Entity declarations",
              "isCorrect": true
            },
            {
              "id": "dtd-5-d",
              "text": "Notation declarations",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The four types of DTD declarations are element type declarations, attribute list declarations, entity declarations, and notation declarations. Page 2.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Element type declarations",
                "Attribute list declarations",
                "Entity declarations",
                "Notation declarations"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-6",
          "type": "short_answer",
          "difficulty": "medium",
          "prompt": "According to the slides, what DTD declaration is used to specify parsable character data?",
          "options": [],
          "shortAnswerAccepted": [
            "#PCDATA",
            "PCDATA"
          ],
          "explanation": "#PCDATA indicates parsable character data. Page 4, '#PCDATA indicates parsable character data.'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "#PCDATA indicates parsable character data."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-8",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "In attribute list declarations, what is the purpose of the ID attribute type?",
          "options": [
            {
              "id": "dtd-8-a",
              "text": "To define the character data of an attribute",
              "isCorrect": false
            },
            {
              "id": "dtd-8-b",
              "text": "To identify individual elements in a document",
              "isCorrect": true
            },
            {
              "id": "dtd-8-c",
              "text": "To represent a list of names for an attribute",
              "isCorrect": false
            },
            {
              "id": "dtd-8-d",
              "text": "To define an attribute as character data",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "ID is used to identify individual elements in a document. Page 5, 'ID. used to identify individual elements in a document'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "ID. used to identify individual elements in a document"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-9",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slide, what can be identified by using attribute list declarations?",
          "options": [
            {
              "id": "dtd-9-a",
              "text": "Which elements may have attributes",
              "isCorrect": true
            },
            {
              "id": "dtd-9-b",
              "text": "What attributes they may have",
              "isCorrect": true
            },
            {
              "id": "dtd-9-c",
              "text": "What values attributes may hold",
              "isCorrect": true
            },
            {
              "id": "dtd-9-d",
              "text": "How element are nested",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Attribute list declarations can identify which elements may have attributes, what attributes they may have, and what values attributes may hold. Page 5.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "which elements may have attributes",
                "what attributes they may have",
                "what values attributes may hold"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-10",
          "type": "short_answer",
          "difficulty": "medium",
          "prompt": "According to the slides, what keyword is used to refer to a list of names which the attribute can hold?",
          "options": [],
          "shortAnswerAccepted": [
            "enumerated type",
            "enumerated"
          ],
          "explanation": "List of names the values that attribute can hold (enumerated type). Page 5, 'List of names the values that attribute can hold (enumerated type)'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "List of names the values that attribute can hold (enumerated type)"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-11",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What does CDATA represent?",
          "options": [
            {
              "id": "dtd-11-a",
              "text": "Character Data, containing any text",
              "isCorrect": true
            },
            {
              "id": "dtd-11-b",
              "text": "Coded Data",
              "isCorrect": false
            },
            {
              "id": "dtd-11-c",
              "text": "Character Definition Attribute",
              "isCorrect": false
            },
            {
              "id": "dtd-11-d",
              "text": "Complex Data Attribute",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "CDATA is character data that contains any text. Page 5, 'CDATA character data, contain any text'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "CDATA character data, contain any text"
              ]
            }
          },
          "topicTags": [
            "XML",
            "DTD",
            "CDATA"
          ]
        },
        {
          "id": "dtd-13",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what DTD declaration associates a name with a fragment of content or reference to a file?",
          "options": [
            {
              "id": "dtd-13-a",
              "text": "Element type declarations",
              "isCorrect": false
            },
            {
              "id": "dtd-13-b",
              "text": "Entity declarations",
              "isCorrect": true
            },
            {
              "id": "dtd-13-c",
              "text": "Attribute list declarations",
              "isCorrect": false
            },
            {
              "id": "dtd-13-d",
              "text": "Notation declarations",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Entity declarations associate a name with some fragment of content. Page 7, 'Entity declarations associate a name with some fragment of content, such as a piece of regular text, a piece of the DTD, or a reference to an external file containing text or binary data.'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "Entity declarations associate a name with some fragment of content, such as a piece of regular text, a piece of the DTD, or a reference to an external file containing text or binary data."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-14",
          "type": "short_answer",
          "difficulty": "medium",
          "prompt": "What kind of data is identified by Notation declarations?",
          "options": [],
          "shortAnswerAccepted": [
            "external binary data",
            "binary data"
          ],
          "explanation": "Notation declarations identify external binary data, which is simply passed by the XML processor to the application. Page 7, 'Notation declarations identify external binary data, which is simply passed by the XML processor to the application.'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "Notation declarations identify external binary data, which is simply passed by the XML processor to the application."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-15",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the purpose of `IDREF`?",
          "options": [
            {
              "id": "dtd-15-a",
              "text": "Allows a unique key to be associated with an element",
              "isCorrect": false
            },
            {
              "id": "dtd-15-b",
              "text": "Allows an element to refer to another element with the designated key",
              "isCorrect": true
            },
            {
              "id": "dtd-15-c",
              "text": "Allows an element to refer to multiple elements",
              "isCorrect": false
            },
            {
              "id": "dtd-15-d",
              "text": "Defines a character data attribute",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "IDREF allows an element to refer to another element with the designated key. Page 8, 'IDREF allows an element to refer to another element with the designated key'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "IDREF allows an element to refer to another element with the designated key"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-16",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the purpose of `ID`?",
          "options": [
            {
              "id": "dtd-16-a",
              "text": "Allows a unique key to be associated with an element",
              "isCorrect": true
            },
            {
              "id": "dtd-16-b",
              "text": "Allows an element to refer to another element with the designated key",
              "isCorrect": false
            },
            {
              "id": "dtd-16-c",
              "text": "Allows an element to refer to multiple elements",
              "isCorrect": false
            },
            {
              "id": "dtd-16-d",
              "text": "Defines a character data attribute",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "ID allows a unique key to be associated with an element. Page 8, 'ID allows a unique key to be associated with an element'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "ID allows a unique key to be associated with an element"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-17",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the purpose of `IDREFS`?",
          "options": [
            {
              "id": "dtd-17-a",
              "text": "Allows a unique key to be associated with an element",
              "isCorrect": false
            },
            {
              "id": "dtd-17-b",
              "text": "Allows an element to refer to another element with the designated key",
              "isCorrect": false
            },
            {
              "id": "dtd-17-c",
              "text": "Allows an element to refer to multiple elements",
              "isCorrect": true
            },
            {
              "id": "dtd-17-d",
              "text": "Defines a character data attribute",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "IDREFS allows an element to refer to multiple elements. Page 8, 'IDREFS allows an element to refer to multiple elements'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "IDREFS allows an element to refer to multiple elements"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-18",
          "type": "multiple_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, what are the two levels of document processing?",
          "options": [
            {
              "id": "dtd-18-a",
              "text": "Well-formed",
              "isCorrect": true
            },
            {
              "id": "dtd-18-b",
              "text": "Valid",
              "isCorrect": true
            },
            {
              "id": "dtd-18-c",
              "text": "Invalid",
              "isCorrect": false
            },
            {
              "id": "dtd-18-d",
              "text": "Poorly-formed",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The two levels of document processing are well-formed and valid. Page 9, 'Two levels of document processing' followed by 'Well-formed' and 'Valid'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "Two levels of document processing",
                "Well-formed",
                "Valid"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-19",
          "type": "short_answer",
          "difficulty": "easy",
          "prompt": "According to the slides, what must an XML document start with?",
          "options": [],
          "shortAnswerAccepted": [
            "<?xml version \"1.0\"?>",
            "<?xml version 1.0?>"
          ],
          "explanation": "XML document starts with <?xml version \"1.0\"?>. Page 9, 'XML document starts with <?xml version “1.0”?>'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "XML document starts with <?xml version “1.0”?>"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-21",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what does a non-validating processor ensure?",
          "options": [
            {
              "id": "dtd-21-a",
              "text": "The XML document conforms to a DTD",
              "isCorrect": false
            },
            {
              "id": "dtd-21-b",
              "text": "The XML document is well-formed",
              "isCorrect": true
            },
            {
              "id": "dtd-21-c",
              "text": "The XML document includes a DTD",
              "isCorrect": false
            },
            {
              "id": "dtd-21-d",
              "text": "The XML document is valid",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "A Non-validating processor ensures an XML document is well-formed before passing information on to application. Page 10, 'Non-validating processor ensures an XML document is well-formed before passing information on to application.'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Non-validating processor ensures an XML document is well-formed before passing information on to application."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-22",
          "type": "short_answer",
          "difficulty": "easy",
          "prompt": "An XML document is considered _____ if it conforms to a DTD.",
          "options": [],
          "shortAnswerAccepted": [
            "valid"
          ],
          "explanation": "A validating processor will not only check that an XML document is well-formed but that is also conforms to a DTD, in which case XML document is considered valid. Page 10, 'A validating processor will not only check that an XML document is well-formed but that is also conforms to a DTD, in which case XML document is considered valid.'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "A validating processor will not only check that an XML document is well-formed but that is also conforms to a DTD, in which case XML document is considered valid."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-23",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what does a validating processor check?",
          "options": [
            {
              "id": "dtd-23-a",
              "text": "If the XML document is well-formed",
              "isCorrect": true
            },
            {
              "id": "dtd-23-b",
              "text": "If the XML document conforms to a DTD",
              "isCorrect": true
            },
            {
              "id": "dtd-23-c",
              "text": "If the XML document contains notation declarations",
              "isCorrect": false
            },
            {
              "id": "dtd-23-d",
              "text": "If the XML document is encrypted",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "A validating processor will not only check that an XML document is well-formed but that is also conforms to a DTD. Page 10, 'A validating processor will not only check that an XML document is well-formed but that is also conforms to a DTD, in which case XML document is considered valid.'",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "A validating processor will not only check that an XML document is well-formed but that is also conforms to a DTD, in which case XML document is considered valid."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML"
          ]
        },
        {
          "id": "dtd-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, which of the following is defined by DTD?",
          "options": [
            {
              "id": "dtd-1-a",
              "text": "The valid syntax of an XML document",
              "isCorrect": true
            },
            {
              "id": "dtd-1-b",
              "text": "The valid data types of an XML document",
              "isCorrect": false
            },
            {
              "id": "dtd-1-c",
              "text": "The valid style of an XML document",
              "isCorrect": false
            },
            {
              "id": "dtd-1-d",
              "text": "The valid structure of an HTML document",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 1, \"DTD defines the valid syntax of an XML document\".",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "DTD defines the valid syntax of an XML document"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML syntax"
          ]
        },
        {
          "id": "dtd-2",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what information does a DTD provide?",
          "options": [
            {
              "id": "dtd-2-a",
              "text": "List of the element names",
              "isCorrect": true
            },
            {
              "id": "dtd-2-b",
              "text": "The order of elements",
              "isCorrect": false
            },
            {
              "id": "dtd-2-c",
              "text": "How elements can be nested",
              "isCorrect": true
            },
            {
              "id": "dtd-2-d",
              "text": "Attributes available for each element type",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 1, a DTD provides: List the element names, Show how elements can be nested, List attributes are available for each element type.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "List the element names",
                "Show how elements can be nested",
                "List attributes are available for each element type"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Element names",
            "Element nesting",
            "Element attributes"
          ]
        },
        {
          "id": "dtd-3",
          "type": "short_answer",
          "difficulty": "medium",
          "prompt": "According to the slides, the grammar for a DTD is specified using what?",
          "options": [],
          "shortAnswerAccepted": [
            "EBNF",
            "Extended Backus-Naur Form"
          ],
          "explanation": "According to page 1, \"The grammar is specified using EBNF (Extended Backus-Naur Form)\".",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "The grammar is specified using EBNF (Extended Backus-Naur Form)"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Grammar",
            "EBNF"
          ]
        },
        {
          "id": "dtd-4",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, is DTD optional for document conformity?",
          "options": [
            {
              "id": "dtd-4-a",
              "text": "Yes, but it is recommended",
              "isCorrect": true
            },
            {
              "id": "dtd-4-b",
              "text": "Yes, and it is not recommended",
              "isCorrect": false
            },
            {
              "id": "dtd-4-c",
              "text": "No, it is required",
              "isCorrect": false
            },
            {
              "id": "dtd-4-d",
              "text": "It depends on the document",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 1, \"Although DTD is optional, it is recommended for document conformity\".",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                1
              ],
              "snippets": [
                "Although DTD is optional, it is recommended for document conformity"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Document conformity"
          ]
        },
        {
          "id": "dtd-6",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "According to the slides, which of the following punctuation marks indicates that elements can occur zero or more times?",
          "options": [
            {
              "id": "dtd-6-a",
              "text": "+",
              "isCorrect": false
            },
            {
              "id": "dtd-6-b",
              "text": "*",
              "isCorrect": true
            },
            {
              "id": "dtd-6-c",
              "text": "?",
              "isCorrect": false
            },
            {
              "id": "dtd-6-d",
              "text": "!",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 4, the asterisk (*) indicates zero or more.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "asterisk (*) indicates zero or more"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Element Repetition",
            "XML",
            "asterisk"
          ]
        },
        {
          "id": "dtd-7",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what attribute types can be defined within attribute list declarations?",
          "options": [
            {
              "id": "dtd-7-a",
              "text": "CDATA",
              "isCorrect": true
            },
            {
              "id": "dtd-7-b",
              "text": "ID",
              "isCorrect": true
            },
            {
              "id": "dtd-7-c",
              "text": "IDREF",
              "isCorrect": true
            },
            {
              "id": "dtd-7-d",
              "text": "KEY",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 5, some possible attribute types are: CDATA character data, contain any text, ID used to identify individual elements in a document, IDREF/ IDREFS.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "CDATA character data, contain any text",
                "ID. used to identify individual elements in a document",
                "IDREF/ IDREFS"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Attribute List",
            "CDATA",
            "ID",
            "IDREF"
          ]
        },
        {
          "id": "dtd-8",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, the question mark (?) is used for what purpose related to element type declarations?",
          "options": [
            {
              "id": "dtd-8-a",
              "text": "Indicates one or more",
              "isCorrect": false
            },
            {
              "id": "dtd-8-b",
              "text": "Indicates zero or more",
              "isCorrect": false
            },
            {
              "id": "dtd-8-c",
              "text": "Indicates either zero or exactly one",
              "isCorrect": true
            },
            {
              "id": "dtd-8-d",
              "text": "Indicates elements can occur in any order",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 4, question mark (?) indicates either zero or exactly one.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "question mark (?) indicates either zero or exactly one"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Element Repetition",
            "XML",
            "question mark"
          ]
        },
        {
          "id": "dtd-9",
          "type": "multiple_choice",
          "difficulty": "hard",
          "prompt": "According to the slides, what can be said about an XML document that is considered 'well-formed'?",
          "options": [
            {
              "id": "dtd-9-a",
              "text": "It conforms to the structural and notational rules of XML",
              "isCorrect": true
            },
            {
              "id": "dtd-9-b",
              "text": "It starts with <?xml version '1.0'?>",
              "isCorrect": true
            },
            {
              "id": "dtd-9-c",
              "text": "All elements are within one root element",
              "isCorrect": true
            },
            {
              "id": "dtd-9-d",
              "text": "All elements are within multiple root elements",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 9, an XML document that conforms to structural and notational rules of XML is considered well-formed. It must also start with <?xml version \"1.0\"?> and all elements must be within one root element.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "XML document that conforms to structural and notational rules of XML is considered well-formed",
                "XML document starts with <?xml version \"1.0\"?>",
                "All elements must be within one root element"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML",
            "Well-formed"
          ]
        },
        {
          "id": "dtd-10",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what is indicated by commas between element names?",
          "options": [
            {
              "id": "dtd-10-a",
              "text": "They must occur in any order",
              "isCorrect": false
            },
            {
              "id": "dtd-10-b",
              "text": "They must occur in succession",
              "isCorrect": true
            },
            {
              "id": "dtd-10-c",
              "text": "They are optional",
              "isCorrect": false
            },
            {
              "id": "dtd-10-d",
              "text": "They indicate an error",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to page 4, commas between element names indicate they must occur in succession.",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "Commas between element names indicate they must occur in succession."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Element names",
            "XML"
          ]
        },
        {
          "id": "6829483d-b362-421a-a805-839a1429a4d2",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what punctuation mark, when used in DTD element type declarations, indicates that an element can occur one or more times?",
          "options": [
            {
              "id": "4a4e1123-7f84-4408-a916-4d17e5e09046",
              "text": "*",
              "isCorrect": false
            },
            {
              "id": "098cf15d-01f0-443b-96a4-b550915399b9",
              "text": "+",
              "isCorrect": true
            },
            {
              "id": "1d3e0f54-4f92-4e45-94e2-e2ff54675f9f",
              "text": "?",
              "isCorrect": false
            },
            {
              "id": "d41a591f-5230-402a-b2e7-ff6c1698d671",
              "text": "None of the above",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "+"
          ],
          "explanation": "According to page 4, the plus sign (+) indicates that an element can occur one or more times.  \"plus (+). indicates one or more\"",
          "source": {
            "pdfName": "INT305_Week02_XML_DTD.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "plus (+). indicates one or more"
              ]
            }
          },
          "topicTags": [
            "DTD",
            "Element Type Declarations"
          ]
        }
      ],
      "status": "draft"
    },
    {
      "id": "5574b0de-bccb-43f5-b4e2-3e6e867a0ce5",
      "title": "INT305_Week03_XML_Namespaces.pdf",
      "pdfName": "INT305_Week03_XML_Namespaces.pdf",
      "createdAt": "2025-09-09T16:10:04.624Z",
      "questionCount": 30,
      "questions": [
        {
          "id": "xml-namespaces-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, what is the primary purpose of XML namespaces?",
          "options": [
            {
              "id": "a",
              "text": "To improve the efficiency of XML parsing.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "To allow multiple markup vocabularies to be used in the same documents.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "To reduce the size of XML documents.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "To enforce strict validation rules on XML documents.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "multiple markup vocabularies",
            "markup vocabularies",
            "same documents"
          ],
          "explanation": "The presentation states that the XML Namespace concept \"is a concept that allows multiple markup vocabularies to be used in the same documents.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Is a concept that allows multiple markup vocabularies to be\nused in the same documents."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Markup Vocabularies"
          ]
        },
        {
          "id": "xml-namespaces-2",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, what is the scope of an XML namespace?",
          "options": [
            {
              "id": "a",
              "text": "It covers only the element in which it is declared.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "It covers all elements in the document.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "It covers the element in which it is declared and all of its descendant elements and its attributes.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "It covers only the attributes of the element in which it is declared.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "element in which it is declared",
            "descendant elements",
            "attributes"
          ],
          "explanation": "The presentation states that \"The scope of an xml namespace covers the element in which it is declared and all of its descendant elements and its attributes.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "The scope of an xml namespace covers the element in\nwhich it is declared and all of its descendant elements and\nits attributes."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Scope"
          ]
        },
        {
          "id": "xml-namespaces-3",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the purpose of a namespace prefix in XML namespaces, according to the presentation?",
          "options": [
            {
              "id": "a",
              "text": "To define the default namespace for the document.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "To attach a prefix to a namespace for convenient use of the namespace.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "To hide the namespace from other parts of the document.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "To validate the namespace against a schema.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "attach a prefix",
            "convenient use",
            "namespace"
          ],
          "explanation": "According to the presentation, \"A namespace prefix is used to attach a prefix to a namespace for convenient use of the namespace.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "A namespace prefix is used to attach a prefix to a\nnamespace for convenient use of the namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Namespace Prefix"
          ]
        },
        {
          "id": "xml-namespaces-4",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is a 'default namespace' in the context of XML namespaces, according to the presentation?",
          "options": [
            {
              "id": "a",
              "text": "A namespace that applies to all elements and attributes in the document.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "A namespace defined with a prefix.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "A namespace without a prefix.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "A namespace that is used for validation purposes only.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "namespace without a prefix",
            "without prefix"
          ],
          "explanation": "The presentation defines a default namespace as \"A namespace without a prefix is a default namespace.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "A namespace without a prefix is a default namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Default Namespace"
          ]
        },
        {
          "id": "xml-namespaces-5",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, to which elements do default namespaces apply?",
          "options": [
            {
              "id": "a",
              "text": "All elements, regardless of prefix.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Only elements with a specific prefix.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Unprefixed elements under the scope of the default namespaces.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Only to the root element of the XML document.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "unprefixed elements",
            "scope of the default namespaces"
          ],
          "explanation": "The presentation states that \"Default namespaces apply to unprefixed elements under the scope of the default namespaces.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Default namespaces apply to unprefixed elements under the\nscope of the default namespaces."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Default Namespace"
          ]
        },
        {
          "id": "xml-namespaces-6",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, how do default namespaces apply to attributes?",
          "options": [
            {
              "id": "a",
              "text": "They apply to all attributes.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "They apply only to attributes with a specific prefix.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "They apply to unprefixed attributes.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "They do not apply to unprefixed attributes.",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [
            "do not apply",
            "unprefixed attributes"
          ],
          "explanation": "The presentation explicitly states that \"Default namespaces do not apply to unprefixed attributes.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Default namespaces do not apply to unprefixed attributes."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Attributes",
            "Default Namespace"
          ]
        },
        {
          "id": "xml-namespaces-7",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, what namespace do unprefixed attributes have?",
          "options": [
            {
              "id": "a",
              "text": "The default namespace.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The namespace of the parent element.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "No namespace.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "A predefined 'attribute' namespace.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "no namespace"
          ],
          "explanation": "The presentation states that \"Unprefixed attributes have no namespace.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Unprefixed attributes have no namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Attributes"
          ]
        },
        {
          "id": "xml-namespaces-8",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "Consider the XML snippet `<root xmlns:m=\"http://www.ns.net/school\"><x:school xmlns:x=\"http://www.ns.net/school\">`. According to the presentation, what namespace is associated with `x:school`?",
          "options": [
            {
              "id": "a",
              "text": "http://www.ns.net/school",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "http://www.ns.net/person",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "No namespace",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "It is undefined because the root element defines the namespace.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "http://www.ns.net/school"
          ],
          "explanation": "The element `x:school` defines its own namespace `xmlns:x=\"http://www.ns.net/school\"`, which overrides any inherited namespace.  The presentation says that both x and m mean .../school in this scope. This is illustrated on page 5.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "The Scope of XML Namespaces",
                "Both x and m\nmean \".../school\"\nin this scope"
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Namespace Scope"
          ]
        },
        {
          "id": "xml-namespaces-9",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "According to the presentation, how are XML namespaces handled in DTDs?",
          "options": [
            {
              "id": "a",
              "text": "DTDs fully support XML namespaces.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "DTDs ignore XML namespaces.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "DTDs do not support namespaces; they treat namespace declarations as normal attributes and prefixes as part of element/attribute names.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "DTDs automatically infer namespaces based on the document structure.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "do not support namespaces",
            "treat namespace declarations as normal attributes",
            "prefixes as part of element/attribute names"
          ],
          "explanation": "The presentation states that \"DTDs (in XML 1.0) do not support namespaces\" and \"DTDs treat xml namespace declaration as a normal attribute and xml namespace prefixes as parts of element/attribute names.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "DTDs (in XML 1.0) do not support namespaces.",
                "DTDs treat",
                "xml namespace declaration as a normal attribute and",
                "xml namespace prefixes as parts of element/attribute\nnames."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs"
          ]
        },
        {
          "id": "xml-namespaces-10",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, what type of schema supports XML namespaces?",
          "options": [
            {
              "id": "a",
              "text": "DTD",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "XML Schemas",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "RELAX NG",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Schematron",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "xml schemas",
            "XML Schemas"
          ],
          "explanation": "The presentation indicates that \"XML Schemas support xml namespaces and use xml namespaces.\"",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "XML Namespaces and XML Schemas",
                "XML Schemas support xml namespaces and use\nxml namespaces."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "XML Schemas"
          ]
        },
        {
          "id": "xml-namespaces-11",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, which of the following statements are true regarding XML namespaces?",
          "options": [
            {
              "id": "a",
              "text": "XML namespaces can only be declared in the root element.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "XML namespaces can be declared under any element.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "A namespace without a prefix is a default namespace.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Default namespaces apply to all attributes.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "namespaces can be declared under any element",
            "namespace without a prefix is a default namespace"
          ],
          "explanation": "Based on the presentation, \"XML namespaces can be declared under any element.\" and \"A namespace without a prefix is a default namespace.\" are both true.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "XML namespaces can be declared under any element.",
                "A namespace without a prefix is a default namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Declaration",
            "Default Namespace"
          ]
        },
        {
          "id": "xml-namespaces-12",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "Based on the DTD example given in the presentation, what is the significance of the statement \"<!ATTLIST root xmlns CDATA #IMPLIED>\"?",
          "options": [
            {
              "id": "a",
              "text": "It mandates that all XML documents using this DTD must have a root element with a defined namespace.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "It allows the root element to have an 'xmlns' attribute, which, according to the DTD, is handled as a normal attribute without namespace awareness.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "It defines a default namespace for all elements within the root element.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "It prevents the use of namespaces within the XML document.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "normal attribute",
            "without namespace awareness"
          ],
          "explanation": "The presentation implies on page 8 that DTDs treat namespace declarations as a normal attribute. Then on page 9 the given DTD and following explaination confirms this. Thus, the correct answer is that the DTD treats xmlns as a normal attribute without namespace awareness.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "XML Namespaces in DTD",
                "<!ATTLIST root xmlns CDATA #IMPLIED>"
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs",
            "Attributes"
          ]
        },
        {
          "id": "xml-namespaces-13",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "According to the DTD example provided, what does it mean when the presentation states that 'it is valid under this DTD and well-formed (if no namespace checking)'?",
          "options": [
            {
              "id": "a",
              "text": "The XML document will always be considered valid, regardless of namespace usage.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The XML document will be valid only if it strictly adheres to the defined namespaces.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "The XML document is syntactically correct according to XML rules and the DTD but might violate namespace constraints if a namespace-aware validator is used.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "The XML document is invalid and will not be parsed correctly.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "syntactically correct",
            "might violate namespace constraints"
          ],
          "explanation": "The parenthetical statement '(if no namespace checking)' indicates that if you check namespaces then it will be invalid, so the validity is conditional. This also implies that it can be well-formed and valid without checking namespace constraints.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "However, it is valid under this DTD and\nwell-formed (if no namespace checking)."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs",
            "Validation",
            "Well-formedness"
          ]
        },
        {
          "id": "namespace-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, what is a fundamental characteristic of the XML namespace concept?",
          "options": [
            {
              "id": "a",
              "text": "It restricts the use of multiple markup vocabularies in the same document.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "It allows multiple markup vocabularies to be used in the same documents.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "It enforces a single, global vocabulary for all XML documents.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "It automatically resolves naming conflicts between different XML documents.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "allows multiple markup vocabularies"
          ],
          "explanation": "The XML Namespace concept is defined as 'a concept that allows multiple markup vocabularies to be used in the same documents.'",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Is a concept that allows multiple markup vocabularies to be used in the same documents."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Concept"
          ]
        },
        {
          "id": "namespace-2",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, under what element can XML namespaces be declared?",
          "options": [
            {
              "id": "a",
              "text": "Only under the root element.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Under any element.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "Only under elements specifically designated as namespace containers.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Only under empty elements.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "any element"
          ],
          "explanation": "XML namespaces can be declared under any element within an XML document.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "XML namespaces can be declared under any element."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Declaration"
          ]
        },
        {
          "id": "namespace-3",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, what is the main purpose of a namespace prefix?",
          "options": [
            {
              "id": "a",
              "text": "To define a new XML element.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "To attach a prefix to a namespace for convenient use of the namespace.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "To specify the XML version.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "To declare a default namespace.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "attach a prefix to a namespace"
          ],
          "explanation": "A namespace prefix is used to attach a prefix to a namespace for convenient use of the namespace.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "A namespace prefix is used to attach a prefix to a namespace for convenient use of the namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Prefix"
          ]
        },
        {
          "id": "namespace-4",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the provided materials, what term is used to describe a namespace that lacks a prefix?",
          "options": [
            {
              "id": "a",
              "text": "Qualified Namespace",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Defined Namespace",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Default Namespace",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Global Namespace",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "default namespace"
          ],
          "explanation": "According to the presentation, a namespace without a prefix is referred to as a default namespace.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "A namespace without a prefix is a default namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Default Namespace"
          ]
        },
        {
          "id": "namespace-5",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, which of the following statements are true regarding how DTDs treat XML namespaces?",
          "options": [
            {
              "id": "a",
              "text": "DTDs fully support XML namespaces.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "DTDs (in XML 1.0) do not support namespaces.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "DTDs treat xml namespace declaration as a normal attribute.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "DTDs treat xml namespace prefixes as parts of element/attribute names.",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [
            "DTDs do not support namespaces.",
            "DTDs treat namespace declarations as normal attributes."
          ],
          "explanation": "The presentation indicates that DTDs (in XML 1.0) do not support namespaces. They are treated as normal attributes, and prefixes are considered part of the element or attribute names.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "DTDs (in XML 1.0) do not support namespaces.",
                "DTDs treat xml namespace declaration as a normal attribute and xml namespace prefixes as parts of element/attribute names."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs"
          ]
        },
        {
          "id": "namespace-6",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "Which technology fully supports and utilizes XML namespaces, according to the presentation?",
          "options": [
            {
              "id": "a",
              "text": "DTDs",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "XML Schemas",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "CSS",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "XSLT",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "XML Schemas"
          ],
          "explanation": "The presentation states that 'XML Schemas support xml namespaces and use xml namespaces.'",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "XML Schemas support xml namespaces and use xml namespaces."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "XML Schemas"
          ]
        },
        {
          "id": "287a1497-5889-401e-a447-74669d06e27a",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, what does 'XML Namespaces' allow in documents?",
          "options": [
            {
              "id": "a",
              "text": "Only one markup vocabulary to be used.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Multiple markup vocabularies to be used.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "No markup vocabularies to be used.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Only standard vocabularies to be used.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "multiple markup vocabularies"
          ],
          "explanation": "The XML Namespace concept allows multiple markup vocabularies to be used in the same documents. (Page 2)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "Is a concept that allows multiple markup vocabularies to be\nused in the same documents."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "markup vocabularies"
          ]
        },
        {
          "id": "c0a5490d-e2d5-4695-b2e6-19c3f9d6768e",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Based on the presentation, what XML construct is used to associate a short name with a namespace for ease of use?",
          "options": [
            {
              "id": "a",
              "text": "Namespace URI",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Namespace declaration",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Namespace prefix",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Default namespace",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "namespace prefix"
          ],
          "explanation": "A namespace prefix is used to attach a prefix to a namespace for convenient use of the namespace. (Page 2)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "A namespace prefix is used to attach a prefix to a\nnamespace for convenient use of the namespace."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "namespace prefix"
          ]
        },
        {
          "id": "82c775ff-9b3c-4d73-a384-0b0880c4bb9e",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, what does the scope of an XML namespace cover?",
          "options": [
            {
              "id": "a",
              "text": "Only the element in which it is declared.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The element in which it is declared and all of its attributes.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "The element in which it is declared and all of its descendant elements.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "The element in which it is declared and all of its descendant elements and its attributes.",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [
            "element and descendant elements and its attributes"
          ],
          "explanation": "The scope of an xml namespace covers the element in which it is declared and all of its descendant elements and its attributes. (Page 2)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "The scope of an xml namespace covers the element in\nwhich it is declared and all of its descendant elements and\nits attributes."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "scope"
          ]
        },
        {
          "id": "6f0ef93d-f53f-4655-8f98-b5f07608e12b",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "Based on the information provided in the presentation regarding DTDs, what happens if you try to define two attributes with the same name but different namespaces?",
          "options": [
            {
              "id": "a",
              "text": "It is considered a valid XML document under the DTD, provided no namespace checking is performed.",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "It is considered invalid and will cause a parsing error.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "The DTD will automatically merge the namespaces.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "The first declared attribute will take precedence.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "valid if no namespace checking"
          ],
          "explanation": "According to the DTD example, it's valid, if no namespace checking is enabled. (Page 9)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "With the namespace concept, one:a and uno:a are\ndisallowed because of duplicate attribute names.",
                "However, it is valid under this DTD and\nwell-formed (if no namespace checking)."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs"
          ]
        },
        {
          "id": "640d4b0f-0bca-4305-81c8-0c7e2d699f9f",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the presentation, which technology does *not* support namespaces?",
          "options": [
            {
              "id": "a",
              "text": "DTD (in XML 1.0)",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "XML Schemas",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "dtd"
          ],
          "explanation": "DTDs (in XML 1.0) do not support namespaces. XML Schemas support xml namespaces and use xml namespaces. (Page 8)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "DTDs (in XML 1.0) do not support namespaces."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs",
            "XML Schemas"
          ]
        },
        {
          "id": "25b2f4e1-955e-494c-a455-d6c15672d2c4",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the provided XML snippet on page 3, which prefix is used for the namespace 'http://www.ns.net/person'?",
          "options": [
            {
              "id": "a",
              "text": "sc",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "ps",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "name",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "firstname",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "ps"
          ],
          "explanation": "In the snippet `xmlns:ps=\"http://www.ns.net/person\">`, the prefix 'ps' is used for the namespace 'http://www.ns.net/person'. (Page 3)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                3
              ],
              "snippets": [
                "xmlns:ps=\"http://www.ns.net/person\""
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "namespace prefix",
            "XML snippet"
          ]
        },
        {
          "id": "a946e163-5346-4981-aa7d-024a6f567648",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, how do DTDs treat XML namespace declarations?",
          "options": [
            {
              "id": "a",
              "text": "They are ignored completely.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "As a normal attribute.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "As an element.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "They cause an error in the DTD.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "normal attribute"
          ],
          "explanation": "DTDs treat xml namespace declaration as a normal attribute. (Page 8)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "xml namespace declaration as a normal attribute"
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs"
          ]
        },
        {
          "id": "6d0d0146-406d-438d-87d5-7c5f66899e1f",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "Based on the examples provided in the presentation, which of the following are true about the scope of XML namespaces?",
          "options": [
            {
              "id": "a",
              "text": "A namespace declared on an element only applies to that element's attributes.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "A namespace declared on an element applies to that element and its descendants, unless overridden.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "An element can only belong to one namespace.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "If an inner element declares a new namespace with the same prefix as an outer element, the inner element's namespace overrides the outer one within its scope.",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [
            "b and d"
          ],
          "explanation": "The scope of an xml namespace covers the element in which it is declared and all of its descendant elements and its attributes. (Page 2). The examples show that inner namespaces override outer ones with the same prefix.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "The scope of an xml namespace covers the element in\nwhich it is declared and all of its descendant elements and\nits attributes."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "scope"
          ]
        },
        {
          "id": "c882465e-0d49-475d-923b-c2a935d06961",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the presentation, how are XML namespace prefixes treated by DTDs?",
          "options": [
            {
              "id": "a",
              "text": "They are ignored.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "As parts of element or attribute names.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "As separate elements.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "As annotations.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "parts of element/attribute names"
          ],
          "explanation": "DTDs treat xml namespace prefixes as parts of element/attribute names. (Page 8)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "xml namespace prefixes as parts of element/attribute\nnames."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "DTDs",
            "namespace prefix"
          ]
        },
        {
          "id": "f53f184d-1847-4f12-8260-25ddf15c824f",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "In the example given on slide 7, what namespace is the attribute `degree` associated with in the `<lecturer degree=\"doctoral\" p:gender=\"male\">` element?",
          "options": [
            {
              "id": "a",
              "text": "http://www.ns.net/school",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "http://www.ns.net/person",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "It has no namespace.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "It inherits the parent's namespace.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "no namespace"
          ],
          "explanation": "According to the presentation, default namespaces do not apply to unprefixed attributes. The 'degree' attribute is unprefixed in this case. (Page 7)",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "Default namespaces do not\napply to unprefixed attributes."
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "attributes",
            "default namespaces"
          ]
        },
        {
          "id": "a697a2ff-93fa-45b6-90e5-8f857898e04f",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Based on slide 7, consider the XML snippet `<lecturer degree=\"doctoral\" p:gender=\"male\">`. What namespace is associated with the `p:gender` attribute?",
          "options": [
            {
              "id": "a",
              "text": "The default namespace.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The 'http://www.ns.net/school' namespace.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "The 'http://www.ns.net/person' namespace.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "No namespace.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "http://www.ns.net/person"
          ],
          "explanation": "The attribute `p:gender` has the namespace associated with the `p` prefix, which is declared as `xmlns:p=\"http://www.ns.net/person\"` on slide 7.",
          "source": {
            "pdfName": "INT305_Week03_XML_Namespaces.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "xmlns:p=\"http://www.ns.net/person\""
              ]
            }
          },
          "topicTags": [
            "XML Namespaces",
            "Attributes",
            "Prefixes"
          ]
        }
      ],
      "status": "draft"
    },
    {
      "id": "6787b1dd-a1cc-451a-a110-b9c367cbfc56",
      "title": "XML-Schemas-v1.2.pdf",
      "pdfName": "XML-Schemas-v1.2.pdf",
      "createdAt": "2025-09-09T16:12:20.796Z",
      "questionCount": 30,
      "questions": [
        {
          "id": "1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "Which of the following is a limitation of DTD?",
          "options": [
            {
              "id": "a",
              "text": "DTD is written in XML format.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "DTD requires the same parser as XML.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "DTD has limited support for data types.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "DTD supports only complex data types.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "DTD has a limited support on data types.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "DTD has a limited support on data types; e.g.,\nstrings, name tokens."
              ]
            }
          },
          "topicTags": [
            "DTD",
            "XML Schemas"
          ]
        },
        {
          "id": "2",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "Which of the following are alternatives to DTD?",
          "options": [
            {
              "id": "a",
              "text": "XML Schema",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "RELAX NG",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "Schematron",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "HTML",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The alternatives to DTD are XML Schema, RELAX NG, and Schematron.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "XML Schema, RELAX NG, Schematron"
              ]
            }
          },
          "topicTags": [
            "Alternatives",
            "DTD",
            "XML Schemas"
          ]
        },
        {
          "id": "3",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "In XML Schema, what does `schemaLocation` contain when using namespaces?",
          "options": [
            {
              "id": "a",
              "text": "Only the schema namespace.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Only the schema location.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "A pair of the schema namespace and the schema location.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Neither schema namespace nor schema location.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "`schemaLocation` contains a pair(s) of the schema namespace and the schema location.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                4
              ],
              "snippets": [
                "schemaLocation contains a pair(s) of the\nschema namespace and the schema location."
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "schemaLocation",
            "Namespaces"
          ]
        },
        {
          "id": "4",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What are the two main types of Schema Components?",
          "options": [
            {
              "id": "a",
              "text": "Elements and Attributes",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "SimpleType and ComplexType",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "Global and Local",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Schema and Instance",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The two main types are simpleType and complexType.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Types: <simpleType>, <complexType>"
              ]
            }
          },
          "topicTags": [
            "Schema Components",
            "SimpleType",
            "ComplexType"
          ]
        },
        {
          "id": "5",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which statement is true about Global Declarations in XML Schema?",
          "options": [
            {
              "id": "a",
              "text": "Can only be used where they are declared.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Cannot be used with namespaces.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Cannot contain minOccurs, maxOccurs",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Are not children of the schema element.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Global Declarations cannot contain minOccurs and maxOccurs.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Cannot contain minOccurs, maxOccurs"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Global Declaration"
          ]
        },
        {
          "id": "6",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which statement is true about Local Declarations in XML Schema?",
          "options": [
            {
              "id": "a",
              "text": "Can be used/referenced anywhere (with namespace).",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Cannot contain minOccurs, maxOccurs.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Can be used where it is declared only.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Is a child of <schema>.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Local declarations can be used where they are declared only.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Can be used where it is declared only."
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Local Declaration"
          ]
        },
        {
          "id": "7",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "Which of the following are valid ways to declare an element?",
          "options": [
            {
              "id": "a",
              "text": "<element name=\".\" type=\".\"/>",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "<element ref=\".\"/>",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "<element name=\".\">{TYPE}</element>",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "<element value=\".\"/>",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The following are valid ways to declare an element:\n<element name=\".\" type=\".\"/>\n<element ref=\".\"/>\n<element name=\".\">{TYPE}</element>",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "<element name=\".\" type=\".\"/>",
                "<element ref=\".\"/>",
                "<element name=\".\">{TYPE}</element>"
              ]
            }
          },
          "topicTags": [
            "Element Declaration"
          ]
        },
        {
          "id": "8",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "In attribute declarations, which keyword defines if an attribute is optional, required, or prohibited?",
          "options": [
            {
              "id": "a",
              "text": "type",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "default",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "name",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "use",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The `use` keyword defines if an attribute is optional, required, or prohibited.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "Use: \"optional\" (default), \"required\", \"prohibited\"",
                "<attribute {NAME} use=\".\"/>"
              ]
            }
          },
          "topicTags": [
            "Attribute Declaration"
          ]
        },
        {
          "id": "9",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "Which of the following are valid simple types in XML Schema?",
          "options": [
            {
              "id": "a",
              "text": "string",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "integer",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "boolean",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "object",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "string, integer, and boolean are valid simple types in XML Schema.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                12
              ],
              "snippets": [
                "type=\"s:string\"/>",
                "type=\"s:integer\"/>",
                "type=\"s:boolean\""
              ]
            }
          },
          "topicTags": [
            "Simple Types"
          ]
        },
        {
          "id": "10",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "In XML Schema, what is the default type if an element is declared with `type=\"s:anyType\"`?",
          "options": [
            {
              "id": "a",
              "text": "The element must be empty.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The element can contain any data type.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "The element must contain only numeric values.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "The element must contain only string values.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "anyType elements are elements that may contain anything. It is the default.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                11
              ],
              "snippets": [
                "anyType elements are elements that\nmay contain anything. It is the default."
              ]
            }
          },
          "topicTags": [
            "anyType",
            "XML Schema"
          ]
        },
        {
          "id": "11",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "How is the hierarchy of built-in data types organized?",
          "options": [
            {
              "id": "a",
              "text": "From complex to simple types.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "From general to specific types.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "From primitive to derived types.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "From derived to primitive types.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The hierarchy is organized from general types like `anyType` to more specific types like string, integer, etc.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Built-in Datatype Hierarchy",
                "anyType",
                "string"
              ]
            }
          },
          "topicTags": [
            "Built-in XML Data Types",
            "Hierarchy"
          ]
        },
        {
          "id": "12",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which of the following XML Schema elements is used to create a sequence of elements?",
          "options": [
            {
              "id": "a",
              "text": "<all>",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "<choice>",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "<sequence>",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "<attribute>",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The <sequence> element is used to create an ordered sequence of elements.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "<compositor> = <all>, <sequence>, <choice>"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Sequence"
          ]
        },
        {
          "id": "13",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "In complex type declarations, what does the term \"compositor\" refer to?",
          "options": [
            {
              "id": "a",
              "text": "A list of attributes",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "A specific data type",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "A sequence, choice or all element",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "A restriction on element values",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "A compositor in complex type declarations can be <all>, <sequence>, or <choice>.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "<compositor> = <all>, <sequence>, <choice>"
              ]
            }
          },
          "topicTags": [
            "ComplexType",
            "Compositor"
          ]
        },
        {
          "id": "14",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What does the `mixed=\"true\"` attribute signify in a `complexType` declaration?",
          "options": [
            {
              "id": "a",
              "text": "The element can only contain other elements, no text.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The element can contain text and other elements.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "The element can only contain attributes.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "The element must be empty.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Setting mixed=\"true\" indicates that the element can contain both text and other elements.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                19
              ],
              "snippets": [
                "<s:complexType mixed=\"true\">"
              ]
            }
          },
          "topicTags": [
            "Mixed Content",
            "complexType"
          ]
        },
        {
          "id": "15",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What XML Schema feature allows reusing a set of attribute declarations?",
          "options": [
            {
              "id": "a",
              "text": "Groups",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Complex Types",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Attribute Groups",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Simple Types",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Attribute Groups allow for reusing a set of attribute declarations.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                20
              ],
              "snippets": [
                "<s:attributeGroup name=\"personAtt\">"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Attribute Groups"
          ]
        },
        {
          "id": "16",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What are the primary ways for deriving new types in XML Schema?",
          "options": [
            {
              "id": "a",
              "text": "Extension and restriction",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "Declaration and definition",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Global and local",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Simple and complex",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Types can be derived through restriction or extension.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                21
              ],
              "snippets": [
                "Complex Type Restriction",
                "Complex Type Extension"
              ]
            }
          },
          "topicTags": [
            "Type Derivation"
          ]
        },
        {
          "id": "17",
          "type": "multiple_choice",
          "difficulty": "hard",
          "prompt": "Which of the following statements are true about Complex Type Extension?",
          "options": [
            {
              "id": "a",
              "text": "It is derived from a simple type.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "The derived type looks like the base type.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "Additional sub-elements may be appended",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Additional attributes may be appended",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Complex type extension enables deriving new types that look like the base type with appended elements or attributes.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                21
              ],
              "snippets": [
                "The derived type looks like the base type that have additional sub-elements appended or additional attributes or both."
              ]
            }
          },
          "topicTags": [
            "Type Derivation",
            "Complex Type"
          ]
        },
        {
          "id": "xml-schema-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What is one of the primary motivations for using XML Schemas over DTDs?",
          "options": [
            {
              "id": "a",
              "text": "XML Schemas are written in XML format.",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "DTD provides better support for data types.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "DTD can be used to write the schema using the xml syntax itself.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "XML Schemas require a different parser than the XML documents.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "XML Schemas are advantageous because they are written in XML format, unlike DTDs. From page 2: \"DTD is used to validate xml documents but the DTD itself is not written in xml format.\" and \"Use the xml syntax itself to write the schema.\"",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "DTD is used to validate xml documents but the DTD\nitself is not written in xml format.",
                "Use the xml syntax itself to write the schema."
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "DTD",
            "Comparison"
          ]
        },
        {
          "id": "xml-schema-2",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to slide 3, which attribute is used in an XML instance document to link to an XML Schema document without using namespaces?",
          "options": [
            {
              "id": "a",
              "text": "targetNamespace",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "xmlns",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "i:noNamespaceSchemaLocation",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "schemaLocation",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The attribute `i:noNamespaceSchemaLocation` is used in an XML instance to specify the location of the schema when no namespaces are used. From page 3: `<root xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\ni:noNamespaceSchemaLocation=\"xml-schema.xsd\">`",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                3
              ],
              "snippets": [
                "<root xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\ni:noNamespaceSchemaLocation=\"xml-schema.xsd\">"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Schema",
            "Namespaces"
          ]
        },
        {
          "id": "xml-schema-3",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "Which of the following schema elements can be used to define the content of a schema component, as mentioned on slide 5?",
          "options": [
            {
              "id": "a",
              "text": "<simpleType>",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "<complexType>",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "<element>",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "<attribute>",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slide mentions Types `<simpleType>`, `<complexType>` and Contents `<element>`, `<attribute>`. Therefore, all options are correct.  From page 5: \"Types: <simpleType>, <complexType> Contents: <element>, <attribute>\"",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Types: <simpleType>, <complexType>",
                "Contents: <element>, <attribute>"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Schema Components"
          ]
        },
        {
          "id": "xml-schema-4",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "If you want to declare that an element can appear multiple times in an XML document, which attribute would you use in its declaration according to slide 7?",
          "options": [
            {
              "id": "a",
              "text": "name",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "type",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "minOccurs and maxOccurs",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "default",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The `minOccurs` and `maxOccurs` attributes control the number of times an element can appear. From page 7: `Occurrence: \"0\", \"1\" (default), ..., \"unbounded\" • <element {NAME} minOccurs=\".\" maxOccurs=\".\"/>`",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "Occurrence: \"0\", \"1\" (default), ..., \"unbounded\"",
                "<element {NAME} minOccurs=\".\" maxOccurs=\".\"/>"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Element Declaration"
          ]
        },
        {
          "id": "xml-schema-5",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "What is the purpose of the `fixed` attribute in an attribute declaration as mentioned on slide 8?",
          "options": [
            {
              "id": "a",
              "text": "To specify the default value of the attribute.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "To indicate that the attribute is required.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "To define that the attribute must have a specific, unchangeable value.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "To specify the data type of the attribute.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The `fixed` attribute is used to specify that the attribute must have a specific, unchangeable value. From page 8: `Default • <attribute {NAME} fixed=\".\"/>`",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "Default",
                "<attribute {NAME} fixed=\".\"/>"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Attribute Declaration"
          ]
        },
        {
          "id": "xml-schema-6",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "Which XML Schema component is used to define the structure and constraints for the content of elements that can contain other elements and attributes?",
          "options": [
            {
              "id": "a",
              "text": "<simpleType>",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "<complexType>",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "<element>",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "<attribute>",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The `<complexType>` is used to define the structure and constraints for elements that contain other elements and attributes. From page 9: `{ComplexType} • <complexType name=\".\"> {Content} </complexType>`",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "{ComplexType} • <complexType name=\".\"> {Content} </complexType>"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "ComplexType"
          ]
        },
        {
          "id": "xml-schema-7",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to slide 10, which of the following are built-in primitive data types in XML Schema?",
          "options": [
            {
              "id": "a",
              "text": "string",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "integer",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "boolean",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "anyType",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "String, integer and boolean are built-in primitive types. From page 10, the data type heirarchy shows that these are all primitive types, where `anyType` and `anySimpleType` are not primitive.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "string",
                "integer",
                "boolean"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Data Types"
          ]
        },
        {
          "id": "xml-schema-8",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to slide 19, what does the mixed content signify in a complex type declaration?",
          "options": [
            {
              "id": "a",
              "text": "It allows only character data within the element.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "It allows only elements within the element.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "It allows both character data and elements within the element.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "It restricts the element from having any content.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The `mixed=\"true\"` attribute in a `complexType` signifies that the element can contain both character data and other elements. From page 19: `This is a <bold>mixed-content</bold> element.`",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                19
              ],
              "snippets": [
                "This is a <bold>mixed-content</bold> element."
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Mixed Content"
          ]
        },
        {
          "id": "xml-schema-9",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the purpose of using `<s:group ref=\"t:fullname\"/>` within a complex type as shown on slide 20?",
          "options": [
            {
              "id": "a",
              "text": "To define a new group of elements within the complex type.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "To include a predefined group of elements into the complex type.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "To create a local element within the complex type.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "To rename an existing element within the complex type.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The `<s:group ref=\"t:fullname\"/>` is used to include a predefined group of elements (in this case, fullname) into the complex type.  From page 20: `Groups and Attribute Groups`",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                20
              ],
              "snippets": [
                "Groups and Attribute Groups"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Groups",
            "Element Reuse"
          ]
        },
        {
          "id": "xml-schema-10",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "According to slide 21, what does 'Simple Type Restriction' mean?",
          "options": [
            {
              "id": "a",
              "text": "Allows multiple choices of base types in its content",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Allows multiple occurrences of its base type",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Limit the possibility of the simple content of the base type.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Any member of the derived type is also a member of the base type",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Simple Type Restriction refers to limiting the possibility of the simple content of the base type as described on page 21. \"Limit the possibility of the simple content of the base type.\"",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                21
              ],
              "snippets": [
                "Limit the possibility of the simple content of the base type."
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Type Derivation",
            "Restriction"
          ]
        },
        {
          "id": "xml-schema-11",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to slide 3, what is the default action in the XML schema if the target namespace is not explicitly defined?",
          "options": [
            {
              "id": "a",
              "text": "Links the instance to a default target namespace.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Does not validate the XML instance.",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "Links the instance without namespaces.",
              "isCorrect": true
            },
            {
              "id": "d",
              "text": "Throws an error during validation.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slide illustrates linking a schema instance without a namespace when the target namespace is not explicitly defined. This allows schema validation without requiring namespace prefixes on elements and attributes in the XML instance document.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                3
              ],
              "snippets": [
                "Schema-Instance Link w/o Namespace",
                "xml-instance.xml"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Schema",
            "Namespaces"
          ]
        },
        {
          "id": "xml-schema-13",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "How do you include a predefined group of attributes (attributeGroup) into a complex type using XML Schema, according to slide 20?",
          "options": [
            {
              "id": "a",
              "text": "Using the attributeGroup element without a ref attribute.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "Using the attributeGroup element with a ref attribute.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "By directly declaring the attributes within the complexType element.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Using the xs:import element to import the attributeGroup.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "You include a predefined group of attributes (attributeGroup) into a complex type using XML Schema with the element `<s:attributeGroup ref=\"t:personAtt\"/>`. ",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                20
              ],
              "snippets": [
                "<s:attributeGroup ref=\"t:personAtt\"/>"
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "Groups",
            "Complex Types",
            "Attribute Reuse"
          ]
        },
        {
          "id": "xml-schemas-1",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to slide 2, what is a key difference between DTD and XML Schema?",
          "options": [
            {
              "id": "a",
              "text": "DTD is written in XML format, while XML Schema is not.",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "XML Schema is written in XML format, while DTD is not.",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "Both DTD and XML Schema are written in XML format.",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "Neither DTD nor XML Schema are written in XML format.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "XML Schema is written in XML format"
          ],
          "explanation": "Slide 2 states: \"DTD is used to validate xml documents but the DTD itself is not written in xml format.\" and mentions using \"the xml syntax itself to write the schema\" as an alternative, implying XML Schema uses XML syntax.",
          "source": {
            "pdfName": "XML-Schemas-v1.2.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "DTD is used to validate xml documents but the DTD itself is not written in xml format.",
                "Use the xml syntax itself to write the schema."
              ]
            }
          },
          "topicTags": [
            "XML Schema",
            "DTD",
            "XML syntax"
          ]
        }
      ],
      "status": "draft"
    },
    {
      "id": "fa50002f-d918-439c-9101-40a8f3782789",
      "title": "INT305_XML_XPath.pdf",
      "pdfName": "INT305_XML_XPath.pdf",
      "createdAt": "2025-09-09T17:19:41.884Z",
      "questionCount": 20,
      "questions": [
        {
          "id": "xml-node-kinds-1",
          "type": "multiple_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, which of the following are XML Node Kinds?",
          "options": [
            {
              "id": "doc-node",
              "text": "Document Node",
              "isCorrect": true
            },
            {
              "id": "elem-node",
              "text": "Element Node",
              "isCorrect": true
            },
            {
              "id": "attribute-node",
              "text": "Attribute Node",
              "isCorrect": true
            },
            {
              "id": "namespace-node",
              "text": "Namespace Node",
              "isCorrect": true
            },
            {
              "id": "html-node",
              "text": "HTML Node",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides list Document, Element, Attribute, Text, Comment, Processing-Instruction, and Namespace Nodes as XML Node Kinds.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                2
              ],
              "snippets": [
                "XML Node Kinds",
                "• XML Node Kinds (XPath 2.0 & XQuery 1.0)",
                "Document Node",
                "Element Node",
                "Attribute Node",
                "(Namespace Node)"
              ]
            }
          },
          "topicTags": [
            "XML",
            "Node Kinds"
          ]
        },
        {
          "id": "xml-tree-structure-1",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, which of the following statements about the XML Tree Structure is correct?",
          "options": [
            {
              "id": "schema-true",
              "text": "All 7 Node Kinds are always part of the document schema structure.",
              "isCorrect": false
            },
            {
              "id": "order-false",
              "text": "The order of a node type is not meaningful.",
              "isCorrect": false
            },
            {
              "id": "namespace-false",
              "text": "No Node type may have a namespace.",
              "isCorrect": false
            },
            {
              "id": "parent-true",
              "text": "Is Parent-Of – This node type can be a parent of the following nodes.",
              "isCorrect": true
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides state that the 'Is Parent-Of' node type can be a parent of the following nodes.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                3
              ],
              "snippets": [
                "In Schema – This node type is a part of the document schema structure.",
                "Node Order – The order of this node type is meaningful.",
                "Have Namespace – This node type may have a namespace.",
                "Is Parent-Of – This node type can be a parent of the following nodes."
              ]
            }
          },
          "topicTags": [
            "XML",
            "Tree Structure"
          ]
        },
        {
          "id": "forward-reverse-axis",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "In XPath, how many forward axes are there?",
          "options": [
            {
              "id": "a",
              "text": "5",
              "isCorrect": false
            },
            {
              "id": "b",
              "text": "7",
              "isCorrect": true
            },
            {
              "id": "c",
              "text": "12",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "13",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "There are 7 forward axes: child, descendant, descendant-or-self, following-sibling, following, self, and attribute.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "7 Forward Axes",
                "child::",
                "descendant::",
                "descendant-or-self::",
                "following-sibling::",
                "following::"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Axes",
            "Forward Axes"
          ]
        },
        {
          "id": "reverse-axis",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "In XPath, how many reverse axes are there?",
          "options": [
            {
              "id": "a",
              "text": "5",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "7",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "12",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "13",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "There are 5 reverse axes: parent, ancestor, ancestor-or-self, preceding-sibling, and preceding.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                6
              ],
              "snippets": [
                "5 Reverse Axes",
                "parent::",
                "ancestor::",
                "ancestor-or-self::",
                "preceding-sibling::",
                "preceding::"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Axes",
            "Reverse Axes"
          ]
        },
        {
          "id": "xml-path-expressions-axis",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what is the purpose of the 'Axis' component in an XML Path Expression?",
          "options": [
            {
              "id": "axis-type",
              "text": "Specifies the type of node to select.",
              "isCorrect": false
            },
            {
              "id": "axis-direction",
              "text": "Defines the tree-relationship between the selected node and the current node.",
              "isCorrect": true
            },
            {
              "id": "axis-name",
              "text": "Provides a unique name for the selected node.",
              "isCorrect": false
            },
            {
              "id": "axis-value",
              "text": "Assigns a value to the selected node.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides mention that each step in an XML Path Expression consists of parts including an 'Axis'. It specifies how to move along the XML document in certain directions.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Each step (consists of 2-3 parts)",
                "1 Axis:: there are 12 axes + 1 deprecated namespace axis"
              ]
            }
          },
          "topicTags": [
            "XML",
            "XPath",
            "Expressions",
            "Axis"
          ]
        },
        {
          "id": "xml-path-expressions-nodetest",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what is the 'Node Test' component in an XML Path Expression used for?",
          "options": [
            {
              "id": "test-type",
              "text": "To specify a kind of test.",
              "isCorrect": true
            },
            {
              "id": "test-attribute",
              "text": "To specify an attribute of a node.",
              "isCorrect": false
            },
            {
              "id": "test-value",
              "text": "To assign a value to the node.",
              "isCorrect": false
            },
            {
              "id": "test-location",
              "text": "To specify a location.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides mention that each step in an XML Path Expression consists of parts including a 'Node Test'. There are two types of tests to consider.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "Each step (consists of 2-3 parts)",
                "1 Node Test (there are 2 types of tests)"
              ]
            }
          },
          "topicTags": [
            "XML",
            "XPath",
            "Expressions",
            "Node Test"
          ]
        },
        {
          "id": "node-kind-test",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, which of the following are valid Node Kind Tests in XPath?",
          "options": [
            {
              "id": "node-test",
              "text": "node()",
              "isCorrect": true
            },
            {
              "id": "elem-test",
              "text": "element()",
              "isCorrect": true
            },
            {
              "id": "attr-test",
              "text": "attribute()",
              "isCorrect": true
            },
            {
              "id": "html-test",
              "text": "html()",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides list node(), element(), text(), comment(), processing-instruction(), and attribute() as valid Node Kind Tests.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "Node Kind Test",
                "node ()",
                "element()",
                "text()",
                "comment()",
                "processing-instruction()",
                "attribute()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Node Test",
            "Node Kind Test"
          ]
        },
        {
          "id": "abbreviated-syntax-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, what is the abbreviated syntax for '/child::node()'",
          "options": [
            {
              "id": "a",
              "text": "/node()",
              "isCorrect": true
            },
            {
              "id": "b",
              "text": "//node()",
              "isCorrect": false
            },
            {
              "id": "c",
              "text": "node()",
              "isCorrect": false
            },
            {
              "id": "d",
              "text": "child::node()",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The abbreviated syntax is simply '/node()'.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                9
              ],
              "snippets": [
                "/child::node() = /node()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Abbreviated Syntax"
          ]
        },
        {
          "id": "string-functions",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, which of the following are functions that operate on string values in XPath?",
          "options": [
            {
              "id": "string-concat",
              "text": "concat()",
              "isCorrect": true
            },
            {
              "id": "string-join",
              "text": "string-join()",
              "isCorrect": true
            },
            {
              "id": "substring",
              "text": "substring()",
              "isCorrect": true
            },
            {
              "id": "deep-equal",
              "text": "deep-equal()",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides list concat(), string-join(), substring(), and normalize-space() as functions that operate on string values. 'deep-equal' is a function on sequences.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Functions on String Values",
                "concat(), string-join(), substring(), normalize-space()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Functions",
            "String Values"
          ]
        },
        {
          "id": "string-matching-functions",
          "type": "multiple_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, which of the following is a string matching function?",
          "options": [
            {
              "id": "contains-function",
              "text": "contains()",
              "isCorrect": true
            },
            {
              "id": "substring-before-function",
              "text": "substring-before()",
              "isCorrect": true
            },
            {
              "id": "concat-function",
              "text": "concat()",
              "isCorrect": false
            },
            {
              "id": "avg-function",
              "text": "avg()",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides list contains(), starts-with(), ends-with(), substring-before(), substring-after(), matches(), replace(), and tokenize() as string matching functions. 'concat()' is listed as being a function that operates on string values, while 'avg()' is a function that operates on sequences.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "String Matching Functions",
                "contains(), starts-with(), ends-with()",
                "substring-before(), substring-after()",
                "matches(), replace(), tokenize()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Functions",
            "String Matching"
          ]
        },
        {
          "id": "node-functions",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, which of the following is a function on nodes?",
          "options": [
            {
              "id": "name-function",
              "text": "name()",
              "isCorrect": true
            },
            {
              "id": "concat-function",
              "text": "concat()",
              "isCorrect": false
            },
            {
              "id": "sum-function",
              "text": "sum()",
              "isCorrect": false
            },
            {
              "id": "insert-before-function",
              "text": "insert-before()",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides list name(), local-name(), namespace-uri(), and root() as functions on nodes.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Functions on Nodes",
                "name(), local-name(), namespace-uri(), root()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Functions",
            "Nodes"
          ]
        },
        {
          "id": "result-distint-nodes",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what does the result of an XPath expression represent?",
          "options": [
            {
              "id": "ordered_nodes",
              "text": "A sequence of distinct nodes in the document order.",
              "isCorrect": true
            },
            {
              "id": "reverse_ordered",
              "text": "A sequence of nodes in reverse document order.",
              "isCorrect": false
            },
            {
              "id": "xml",
              "text": "A well-formed XML document.",
              "isCorrect": false
            },
            {
              "id": "string",
              "text": "A string containing the combined text of all selected nodes.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The slides state that the result of an XPath expression is 'A sequence of distinct nodes in the document order'",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                5
              ],
              "snippets": [
                "A sequence of distinct nodes in the document order"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Expressions",
            "Result"
          ]
        },
        {
          "id": "ancestor-or-self-definition",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the XPath Axes diagram, what is equal to ancestor-or-self?",
          "options": [
            {
              "id": "descendant",
              "text": "self ∪ descendant",
              "isCorrect": false
            },
            {
              "id": "ancestor",
              "text": "self ∪ ancestor",
              "isCorrect": true
            },
            {
              "id": "empty",
              "text": "empty",
              "isCorrect": false
            },
            {
              "id": "descandant_and_ancestor",
              "text": "descendant ∪ ancestor",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "According to the XPath Axes diagram ancestor-or-self = self ∪ ancestor.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                7
              ],
              "snippets": [
                "ancestor-or-self = self ∪ ancestor"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Axis"
          ]
        },
        {
          "id": "local-name-syntax",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "What is the correct syntax in XPath for selecting all nodes with the name 'tag' in any namespace?",
          "options": [
            {
              "id": "normal_name",
              "text": "tag",
              "isCorrect": false
            },
            {
              "id": "local-name",
              "text": "*:tag",
              "isCorrect": true
            },
            {
              "id": "prefixed_name",
              "text": "p:tag",
              "isCorrect": false
            },
            {
              "id": "wrong_local-name",
              "text": "local-name(tag)",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The syntax for 'local-name' is *:tag",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                8
              ],
              "snippets": [
                "*:local-name",
                "e.g., *:tag"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Node Test"
          ]
        },
        {
          "id": "context-functions",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what are context functions in XPath?",
          "options": [
            {
              "id": "string",
              "text": "String specific functions.",
              "isCorrect": false
            },
            {
              "id": "boolean",
              "text": "Boolean functions.",
              "isCorrect": false
            },
            {
              "id": "position_function",
              "text": "position() and last().",
              "isCorrect": true
            },
            {
              "id": "concat_string",
              "text": "concat() and string-join().",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Position and last are context function.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Context Functions",
                "position(), last()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Context Functions"
          ]
        },
        {
          "id": "let-xquery",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, in XQuery, what is the purpose of the 'let' keyword?",
          "options": [
            {
              "id": "let_function",
              "text": "Assigns the value.",
              "isCorrect": true
            },
            {
              "id": "let_node",
              "text": "To let a node.",
              "isCorrect": false
            },
            {
              "id": "let_where",
              "text": "To specify where clause.",
              "isCorrect": false
            },
            {
              "id": "let_order",
              "text": "To order the result.",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "The purpose of the let function is to assign a value",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                31
              ],
              "snippets": [
                "let $y :=",
                "Assign the value of ... to $y"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "XQuery"
          ]
        },
        {
          "id": "document-construct-query",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what is the construct operation for Document Node?",
          "options": [
            {
              "id": "document_construct",
              "text": "document { content }",
              "isCorrect": true
            },
            {
              "id": "element_construct",
              "text": "element elm { content }",
              "isCorrect": false
            },
            {
              "id": "text_construct",
              "text": "text { text-content }",
              "isCorrect": false
            },
            {
              "id": "comment_construct",
              "text": "comment { content }",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "document node = document { content }",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                32
              ],
              "snippets": [
                "Document Node",
                "content = document { content }"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "XQuery"
          ]
        },
        {
          "id": "processing-construct",
          "type": "single_choice",
          "difficulty": "hard",
          "prompt": "According to the slides, what is processing construct?",
          "options": [
            {
              "id": "document_construct",
              "text": "document { content }",
              "isCorrect": false
            },
            {
              "id": "process_construct",
              "text": "processing-instruction\n{ \"target\" } { \"instruction\" }",
              "isCorrect": true
            },
            {
              "id": "text_construct",
              "text": "text { text-content }",
              "isCorrect": false
            },
            {
              "id": "comment_construct",
              "text": "comment { content }",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "Processing node = processing-instruction\n{ \"target\" } { \"instruction\" }",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                32
              ],
              "snippets": [
                "Processing-instruction Node",
                "<?target instruction?> = processing-instruction\n{ \"target\" } { \"instruction\" }"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "XQuery"
          ]
        },
        {
          "id": "element-node-construct",
          "type": "single_choice",
          "difficulty": "medium",
          "prompt": "According to the slides, what is the construct operation for Element Node?",
          "options": [
            {
              "id": "document_construct",
              "text": "document { content }",
              "isCorrect": false
            },
            {
              "id": "element_construct",
              "text": "element elm { content }",
              "isCorrect": true
            },
            {
              "id": "text_construct",
              "text": "text { text-content }",
              "isCorrect": false
            },
            {
              "id": "comment_construct",
              "text": "comment { content }",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [],
          "explanation": "element node = element elm { content }",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                32
              ],
              "snippets": [
                "Element Node",
                "<elm>content</elm> = element elm { content }"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "XQuery"
          ]
        },
        {
          "id": "int630-node-namespace-uri-1",
          "type": "single_choice",
          "difficulty": "easy",
          "prompt": "According to the slides, which of the following is a function on nodes in XPath?",
          "options": [
            {
              "id": "option-a",
              "text": "string-join()",
              "isCorrect": false
            },
            {
              "id": "option-b",
              "text": "name()",
              "isCorrect": true
            },
            {
              "id": "option-c",
              "text": "concat()",
              "isCorrect": false
            },
            {
              "id": "option-d",
              "text": "substring()",
              "isCorrect": false
            }
          ],
          "shortAnswerAccepted": [
            "name()"
          ],
          "explanation": "The slide lists `name(), local-name(), namespace-uri(), root()` as functions on nodes. `concat(), string-join(), substring()` are categorized as functions on string values.",
          "source": {
            "pdfName": "INT305_XML_XPath.pdf",
            "evidence": {
              "pageNumbers": [
                10
              ],
              "snippets": [
                "Functions on Nodes",
                "name(), local-name(), namespace-uri(), root()"
              ]
            }
          },
          "topicTags": [
            "XPath",
            "Functions on Nodes"
          ]
        }
      ],
      "status": "draft"
    }
  ]
}